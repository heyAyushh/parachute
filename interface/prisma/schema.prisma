generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id        String      @id @default(uuid())
  publicKey String      @unique
  email     String?     @unique
  batch     Batch[]
  challenge Challenge[]
}

model Batch {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  count     Int
  user      User     @relation(fields: [userId], references: [id])
  status    Status   @default(PENDING)
  wallet    Wallet?
  drops     Drop[]

  userId String
}

enum Status {
  PENDING
  COMPLETED
  FAILED
  STARTED
  CANCELLED
}

model Drop {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  count     Int
  batch     Batch    @relation(fields: [batchId], references: [id])
  status    Status   @default(PENDING)
  to        String?
  amount    String?

  batchId   String
}

model Wallet {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  publicKey  String   @db.VarChar(255)
  privateKey String   @db.VarChar(10000)
  batch      Batch    @relation(fields: [batchId], references: [id])

  batchId    String   @unique
}

model Challenge {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  address   String   @unique
  challenge String   @db.VarChar(255)
  User      User?    @relation(fields: [userId], references: [id])

  userId    String?
}
